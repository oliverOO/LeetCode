package com.leetcode;

public class LongestPalindromicSubstring {

	public static String longestPalindrome(String s) {
		String result = "";
		String temp = "";
		
		int count = 1;
		for(int i=1; i<s.length();){
			temp = s.charAt(i) + "";
			while(i-count >= 0 && i+count <= s.length()-1 && s.codePointAt(i-count) == s.codePointAt(i+count)){
				temp = s.charAt(i-count) + temp + s.charAt(i+count);
				count = count + 1;
			}
			i = temp.equals(s.charAt(i) + "") ? i + 1 : i + (count - 1);
			count = 1;
			
			if(temp.length() > result.length()){
				result = temp;
			}else{
				temp = "";
			}
		}
		return result;
	}
	
	public static void main(String[] args){
		String str = "abacbabcaeca";
		String str
		String str2 = "acabcbabcb";
		
		System.out.println(longestPalindrome(str1));
	}
}